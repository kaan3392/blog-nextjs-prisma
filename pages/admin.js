import Head from "next/head";
import styles from "../styles/Admin.module.css";
import { PrismaClient } from "@prisma/client";
import Pagination from "../components/Pagination"
import { useState } from "react";
import moment from "moment";
import Link from "next/link";
import { getToken } from "next-auth/jwt"
import { useRouter } from "next/router";

export default function Admin({count, posts}) {

  const [perPage, setPerPage] = useState(2)
  const router = useRouter()

  const forbid = async (id) => {
    // allowed false, checked true
    const body = {id}
    const res = await fetch("/api/forbid", {
      method: 'POST',
      body: JSON.stringify(body),
      headers: { "Content-Type": "application/json" }
    })
    const data = await res.json()
    console.log("data", data)
    if (data === "success") {
      let url = "/admin"
      if (router.query.length > 0) {
        url += "?"
      }
      if (router.query.page) {
        url += "&page="+router.query.page
      }
      router.push(url)
    }
  }

  const clear = async (id) => {
    // reported empty, allowed true
    const body = {id}
    const res = await fetch("/api/clear", {
      method: 'POST',
      body: JSON.stringify(body),
      headers: { "Content-Type": "application/json" }
    })
    const data = await res.json()
    console.log("data", data)
    if (data === "success") {
      let url = "/admin"
      if (router.query.length > 0) {
        url += "?"
      }
      if (router.query.page) {
        url += "&page="+router.query.page
      }
      router.push(url)
    }
  }

  const since = (stamp) => {
    return moment(stamp).fromNow()
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.posts}>
        {posts.map((post,i) => (
          <div key={i} className={styles.post} style={post.reported.length > 0 ? {border:"2px dashed tomato"} : (post.checked && !post.allowed) ? {border:"2px solid tomato"} : {border:"none"}}>
            <Link href={"/post/"+post.id} className={styles.info}>
              <div className={styles.title}>{post.title}</div>
              <div className={styles.date}>{since(post.date)}</div>
              <div className={styles.tags}>
                {post.tags.map((tag,j) => (
                  <div key={j} className={styles.tag}>{tag}</div>
                  ))}
              </div>
            </Link>
            {(post.checked && post.allowed && post.reported.length > 0) && <div className={styles.buttons}>
              <button className={`${styles.button} ${styles.negative}`} onClick={() => forbid(post.id)}>Ban</button>
              <button className={`${styles.button} ${styles.positive}`} onClick={() => clear(post.id)}>Clear</button>
            </div>}
            {(post.checked && !post.allowed) && <div className={styles.buttons}>
              <button className={`${styles.button} ${styles.positive}`} onClick={() => clear(post.id)}>Clear</button>
            </div>}
            {(!post.checked) && <div className={styles.buttons}>
              <button className={`${styles.button} ${styles.negative}`} onClick={() => forbid(post.id)}>Refuse</button>
              <button className={`${styles.button} ${styles.positive}`} onClick={() => clear(post.id)}>Allow</button>
            </div>}
          </div>
        ))}
      </div>
      <Pagination count={count} perPage={perPage} />
    </div>
  );
}

export const getServerSideProps = async (context) => {
  const token = await getToken({req:context.req})
  console.log(token)
  if (!token || token.role !== "ADMIN") {
    // redirect
    //console.log("!token || !admin")
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }
  const prisma = new PrismaClient();
  const count = await prisma.Post.count({
    where: {
      OR: [
        {
          checked: false
        },
        {
          allowed: true,
          reported: {
            isEmpty: false
          },
        },
        {
          checked: true,
          allowed: false
        },
      ],
    },
  })
  const posts = await prisma.Post.findMany({
    where: {
      OR: [
        {
          checked: false,
        },
        {
          allowed: true,
          reported: {
            isEmpty: false
          },
        },
        {
          checked: true,
          allowed: false
        },
      ],
    },
    select: {
      id: true,
      date: true,
      tags: true,
      title: true,
      checked: true,
      allowed: true,
      reported: true,
      authorId: true,
    },
    orderBy: [//          1 "reported, allowed, checked"           2 "!reported, !allowed, !checked"              3 "!allowed, checked"
      {
        allowed: "desc"
      },
      {
        reported: "desc"
      },
      {
        date: "asc"
      },
    ],
    take: 100
  })
  //console.log(posts)
  return {
    props: {count, posts}
  }
};
