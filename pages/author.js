import Head from "next/head";
import React, { useEffect, useState, useRef } from "react";
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import { getSession } from "next-auth/react"
import { PrismaClient } from "@prisma/client";
import { unstable_getServerSession } from "next-auth/next"
import { authOptions } from "./api/auth/[...nextauth]"
import { getToken } from "next-auth/jwt"
import styles from "../styles/Author.module.css";
import Masonry from "react-masonry-css";
import Link from "next/link";
import { useRouter } from 'next/router'

export default function Author({posts}) {
  const router = useRouter()
  const maxLength = 20
  const breakpointColumnsObj = {
    default: 4,
    1100: 3,
    700: 2,
    500: 1,
  };

  const newPage = () => {
    router.push("/edit")
  }

  return (
    <>
      <Head>
        <title>Editor</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.main}>
        <Masonry
          breakpointCols={breakpointColumnsObj}
          className={styles.myMasonryGrid}
          columnClassName={styles.myMasonryGrid_column}
        >
          {posts.map((post, i) => (
            <div key={i}>
              <Link  href={`/edit/${post.id}`}>
                <div className={styles.container}>
                  <div className={styles.imageContainer}>
                    <img className={styles.image} src={post.image} alt={post.title} title={post.title} />
                  </div>
                  <div className={styles.info} title={post.title}>
                    <div className={styles.title}>{post.title.length > maxLength ? post.title.substring(0, maxLength) + "..." : post.title}</div>
                    <div className={styles.short}>{!post.checked ? "Waiting for admin to check..." : post.allowed ? "Published" : "Rejected"}</div>
                  </div>
                </div>
              </Link>
            </div>
          ))}
        </Masonry>
        <button onClick={newPage} className={styles.new_button}>NEW PAGE</button>
      </div>
    </>
  );
}

export async function getServerSideProps(context) {
  const token = await getToken({req:context.req})
  if (!token) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }
  const prisma = new PrismaClient();
  const posts = await prisma.Post.findMany({
    where: {
      authorId: token.sub
    },
    select: {
      id: true,
      date: true,
      tags: true,
      title: true,
      image: true,
      checked: true,
      allowed: true,
    }
  });
  //console.log("posts", posts)
  return {props:{posts}}
}
