import Head from "next/head";
import Post from "../../components/Post";
import { PrismaClient } from "@prisma/client";
import Carousel from "../../components/Carousel";
import { useRouter } from "next/router";

export default function SinglePost({ post, similar }) {
  const router = useRouter();

  const reportPost = async (id) => {
    // reported empty, allowed true
    try {
      const res = await fetch("/api/report", {
        method: "POST",
        body: JSON.stringify({id}),
        headers: { "Content-Type": "application/json" },
      });
      const data = await res.json();
      console.log(data)
      if (data === "success") {
        router.push("/");
      }
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div style={{ padding: "1rem" }}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Post post={post} />
      <div
        onClick={() => reportPost(post.id)}
        style={{ display: "flex", justifyContent: "flex-end" }}
      >
        <div
          style={{
            color: "red",
            textDecoration: "underline",
            marginBottom: "10px",
            cursor: "pointer",
          }}
        >
          Report suspicious content ?
        </div>
      </div>
      <Carousel
        breakpoints={{
          760: {
            perPage: 2,
          },
          560: {
            perPage: 1,
          },
        }}
        perPage={3}
        slides={similar}
      />
    </div>
  );
}

export async function getServerSideProps(context) {
  const prisma = new PrismaClient();
  const { id } = context.query;
  const post = await prisma.Post.findUnique({
    where: {
      id: id,
    },
  });
  const similar = await prisma.Post.findMany({
    where: {
      tags: {
        hasEvery: post.tags,
      },
      NOT: {
        id: post.id,
      },
    },
    orderBy: {
      date: "desc",
    },
    take: 10,
  });
  return {
    props: { post, similar },
  };
}
