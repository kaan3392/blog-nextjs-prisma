import Head from "next/head";
import Link from "next/link";
import styles from "../styles/Reset.module.css";
import { useRef, useState } from "react";
import { useRouter } from 'next/router';
import { getToken } from "next-auth/jwt"
import { PrismaClient } from "@prisma/client";

export default function Reset({  }) {
  const passRef = useRef()
  const confRef = useRef()

  const [error, setError] = useState("")
  const router = useRouter();

  const tryReset = async (e) => {
    e.preventDefault()
    if (passRef.current.value !== confRef.current.value) {
      setError("Passwords doesn't match!")
    }
    
    const body = {pass:passRef.current.value, conf:confRef.current.value, token:router.query.token}
    const res = await fetch("api/auth/reset", {
      method: 'POST',
      body: JSON.stringify(body),
      headers: { "Content-Type": "application/json" }
    })
    const data = await res.json()
    if (!data || data.error) {
      let error = data.error
      console.error(error)
      setError(error)
    } else {
      // başarılı yazdır
      setTimeout(() => {
        router.push("/login")
      }, 2000);
    }
  }

  return (
    <div>
      <Head>
        <title>Reset</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.container}>
        <div className={styles.wrapper}>
          <form onSubmit={(e) => tryReset(e)}>
            <div className={styles.part}>
              <div>Password</div>
              <input ref={passRef} name="password" type="password" placeholder="password" />
            </div>
            <div className={styles.part}>
              <div>Confirm Password</div>
              <input ref={confRef} name="password" type="password" placeholder="password" />
            </div>
            <button type="submit" className={styles.btn}>
              Confirm Change
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

export async function getServerSideProps(context) {
  const prisma = new PrismaClient();
  const token = context.query.token
  if (!token) {
    // redirect
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }
  const user = await prisma.User.findUnique({
    where: {
      token: token
    },
    select: {
      name: true,
      email: true,
      password: true,
      expire: true,
      verified: true,
    }
  });
  if (!user || user.expire <= Date.now()) {
    // redirect
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }
  return {
    props: {  },
  };
}
